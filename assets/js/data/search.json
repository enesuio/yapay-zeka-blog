[
  
  {
    "title": "Yapay Zeka Görsel Üretim Modelleri Nedir?",
    "url": "/yapay-zeka-blog/posts/yapay-zeka-nedir/",
    "categories": "AI, Görsel Üretim, Teknoloji",
    "tags": "Yapay Zeka, Görsel Üretim Modelleri, AI Uygulamaları",
    "date": "2024-12-29 00:00:00 +0300",
    





    
    "snippet": "Yapay Zeka Görsel Üretim Modelleri Nedir?Görsel üretim modelleri, bilgisayarların özgün görseller oluşturmasını sağlayan yapay zeka algoritmalarıdır. Bu teknolojiler, son yıllarda dijital dünyanın ...",
    "content": "Yapay Zeka Görsel Üretim Modelleri Nedir?Görsel üretim modelleri, bilgisayarların özgün görseller oluşturmasını sağlayan yapay zeka algoritmalarıdır. Bu teknolojiler, son yıllarda dijital dünyanın pek çok alanında çığır açmıştır. Görsel sanatlar, eğitim materyalleri, reklamcılık, oyun tasarımı ve daha fazlasında yapay zeka modellerinin etkilerini görmek mümkün. Ancak bu modellerin çalışma prensiplerini, kullanım alanlarını ve getirdikleri yenilikleri anlamadan bu teknolojiden tam anlamıyla faydalanmak zor olabilir. Bu yazıda, yapay zeka görsel üretim modellerini detaylı bir şekilde inceleyeceğiz.Görsel Üretim Modelleri Nasıl Çalışır?Yapay zeka görsel üretim modelleri, derin öğrenme teknikleri üzerine inşa edilmiştir. Bu modellerin temel amacı, eğitildikleri veri setlerini analiz ederek görsellerin temel özelliklerini öğrenmek ve bu bilgiyi yeni görseller oluşturmak için kullanmaktır.Başlıca Teknolojiler:      GAN (Generative Adversarial Networks): GAN’ler, iki yapay sinir ağının birbirine karşı çalıştığı bir sistemdir. Bir ağ sahte görseller üretirken, diğeri bu görsellerin gerçek olup olmadığını değerlendirir. Bu rekabet, zamanla çok gerçekçi görsellerin üretilmesini sağlar. Örneğin, GAN’ler portreler, manzaralar veya soyut sanat eserleri oluşturmak için kullanılabilir.        Diffusion Modelleri:Diffusion modelleri, rastgele gürültüyle başlayan bir süreci adım adım geliştirerek anlamlı ve detaylı görseller oluşturur. Bu modeller özellikle gerçekçi görseller oluşturma kapasitesiyle dikkat çeker.        Transformer Modelleri:Metinden görsel üretme alanında devrim yaratan transformer modelleri, OpenAI’nin DALL·E modeli gibi araçların temelini oluşturur. Bu modeller, “bir kedinin şapka takmış hali” gibi spesifik taleplere göre görseller üretebilir.  Eğitim Süreci:Modeller, milyonlarca görsel ve bu görsellere ait açıklamalarla eğitilir. Daha fazla ve çeşitli veri, modelin daha karmaşık ve özgün görseller üretmesini sağlar. Eğitim süreci, güçlü işlemci ve GPU’lar gerektirir, çünkü milyonlarca veri üzerinde yapılan bu analizler oldukça yoğun bir işlem gücü talep eder.Günlük Hayatta Kullanım AlanlarıYapay zeka görsel üretim modellerinin hayatımızdaki etkisi giderek büyüyor. İşte bu teknolojinin en yaygın kullanım alanlarından bazıları:      Sanat ve Tasarım:Yapay zeka, sanatçıların yaratıcılığını destekleyen güçlü bir araçtır. Örneğin, bir sanatçı soyut bir fikri hayata geçirmek için yapay zeka modellerinden yardım alabilir. Bu modeller, sadece birkaç kelimeyle eşsiz sanat eserleri oluşturabilir.        Pazarlama ve Reklamcılık:Görseller, pazarlama stratejilerinin en kritik bileşenlerinden biridir. Yapay zeka sayesinde, markalar hedef kitlelerine özgü görseller oluşturabilir ve kampanyalarını daha etkili hale getirebilir. Ayrıca, sosyal medya içeriklerinden dijital reklam panolarına kadar birçok platformda kullanılacak özgün görseller hızla üretilebilir.        Oyun ve Film Endüstrisi:Oyun dünyası ve film prodüksiyonu, karmaşık ve yaratıcı görseller gerektirir. Yapay zeka modelleri, karakter tasarımı, çevre modellemesi ve görsel efektlerde büyük kolaylık sağlar. Örneğin, bir oyun için yeni bir gezegenin tasarımı, yapay zeka modelleri kullanılarak saatler yerine dakikalar içinde yapılabilir.        Eğitim ve Araştırma:Eğitimde görsellerin kullanımı, öğrencilerin konuları daha iyi anlamasına yardımcı olur. Yapay zeka, öğretmenlere ve araştırmacılara özel görseller oluşturma konusunda destek olabilir. Örneğin, biyoloji dersinde kullanılan karmaşık hücre yapılarını açıklayan görseller, bu teknolojiyle daha hızlı ve etkili bir şekilde hazırlanabilir.        Moda ve İç Mekan Tasarımı:Moda tasarımcıları veya iç mimarlar, yeni fikirler geliştirmek ve müşteri beklentilerini karşılamak için yapay zekadan faydalanabilir. Bir müşterinin tarif ettiği bir kıyafet veya oda tasarımı, yapay zeka tarafından görselleştirilebilir.  Avantajları ve ZorluklarıAvantajları:      Hız ve Verimlilik:Yapay zeka, insanlar için saatler sürebilecek karmaşık tasarımları dakikalar içinde üretebilir. Bu da özellikle zamanın kritik olduğu projelerde büyük avantaj sağlar.        Maliyet Tasarrufu:Özellikle küçük işletmeler, pahalı tasarım süreçlerinden kaçınarak yapay zeka ile uygun maliyetli çözümler bulabilir.        Yaratıcılığı Destekleme:Yapay zeka, kullanıcıların hayal güçlerini sınırların ötesine taşımalarına yardımcı olur. Kullanıcılar, akıllarında beliren fikirleri hızla görselleştirebilir.  Zorlukları:      Telif Hakkı Sorunları:Modeller, genellikle kamuya açık veya lisanslı görsellerle eğitilir. Ancak, telif hakkı ihlalleri konusunda dikkatli olunmalıdır.        Yanıltıcı Bilgi Üretimi:Gerçeğe yakın görseller, yanlış bilgi yaymak için kullanılabilir. Bu da etik sorunları beraberinde getirir.        Teknik Bilgi Gereksinimi:Bu modellerden tam anlamıyla faydalanmak için belirli bir teknik bilgi seviyesi gerekebilir.  SonuçYapay zeka görsel üretim modelleri, yaratıcılığı ve teknolojiyi birleştiren etkileyici bir araçtır. Bu modeller, sanatçıların, işletmelerin ve bireylerin hayal güçlerini gerçeğe dönüştürmelerine olanak tanır. Eğer bu alanda yeniyseniz, bu teknolojinin sunduğu fırsatları keşfetmeye başlamak için en doğru zamandasınız.“Hayal edin, yapay zeka gerçekleştirsin. Teknolojinin sınırlarını birlikte keşfedelim!”"
  },
  
  {
    "title": "Yapay Zeka Görsel Üretim Modellerinin Tarihçesi",
    "url": "/yapay-zeka-blog/posts/yapay-zeka-tarihcesi/",
    "categories": "AI, Tarihçe, Teknoloji",
    "tags": "Yapay Zeka, Görsel Üretim Modelleri, Teknoloji Tarihi",
    "date": "2024-03-08 00:00:00 +0300",
    





    
    "snippet": "Yapay Zeka Görsel Üretim Modellerinin TarihçesiYapay zeka destekli görsel üretim modellerinin tarihi, teknolojinin gelişimiyle paralel bir yol izler. Bilim insanlarının ve mühendislerin yıllar süre...",
    "content": "Yapay Zeka Görsel Üretim Modellerinin TarihçesiYapay zeka destekli görsel üretim modellerinin tarihi, teknolojinin gelişimiyle paralel bir yol izler. Bilim insanlarının ve mühendislerin yıllar süren çabalarıyla bugün hayranlık uyandıran bu teknolojiler ortaya çıkmıştır. Bu yazıda, görsel üretim modellerinin kökenlerinden günümüzdeki gelişmiş hâline kadar olan serüvenini inceleyeceğiz.Başlangıç Noktası: Yapay Zeka ve Görüntü İşlemeYapay zeka ile görsel üretimin temelleri 20. yüzyılın ortalarında atıldı. Bilgisayarların görüntüleri analiz edebilme ve işleyebilme yetenekleri üzerinde yapılan ilk çalışmalar, bu alanın başlangıcı oldu.  1960’lar: Dijital görüntü işleme teknikleri geliştirildi. Bu teknikler, uydulardan alınan görüntülerin analiz edilmesi gibi projelerde kullanıldı.  1970’ler: İlk yapay sinir ağları konsepti ortaya çıktı. Bu ağlar, temel düzeyde görsel tanıma görevleri gerçekleştirebiliyordu.  1980’ler: Daha sofistike algoritmalar ve veri işleme gücü, yapay zekanın görsel işleme alanında daha geniş kullanımını sağladı.Dönüm Noktası: Derin Öğrenme ve GAN’lerGörsel üretim modellerinin bugünkü başarısının arkasında derin öğrenme devrimi yatmaktadır. Özellikle 2010’ların başında bu teknoloji büyük bir sıçrama yaptı.  2014: Ian Goodfellow ve ekibi, Generative Adversarial Networks (GAN) yöntemini tanıttı. Bu yenilikçi model, görsellerin oluşturulmasında devrim niteliğindeydi. İki yapay sinir ağı birbiriyle rekabet ederek gerçekçi görseller üretebiliyordu.  2015: DeepDream gibi projelerle yapay zeka, soyut ve sanatsal görseller oluşturdu. Bu, yapay zekanın sanatsal potansiyelini ortaya koydu.  2016: StyleGAN, görsellerin stil transferi gibi görevlerde büyük bir başarı gösterdi. Örneğin, bir fotoğrafın Van Gogh tarzında yeniden yaratılması mümkün hâle geldi.Günümüzde Görsel Üretim ModelleriBugün yapay zeka destekli görsel üretim modelleri, sadece akademik bir merak konusu değil, aynı zamanda ticari bir gereklilik hâline geldi.  DALL·E: OpenAI tarafından geliştirilen bu model, metin tabanlı girdilerle görsel oluşturma yeteneği sayesinde büyük bir popülerlik kazandı.  MidJourney ve Stable Diffusion: Kullanıcı dostu arayüzleri ve etkileyici sonuçlarıyla yaratıcı projelerde devrim yaratıyor.  Real-ESRGAN: Görsellerin çözünürlüğünü artırmak için kullanılan, görsel iyileştirme teknolojileri arasında lider bir modeldir.Geleceğe BakışYapay zeka görsel üretim modellerinin geleceği oldukça parlak görünüyor. Daha hızlı, daha akıllı ve daha yaratıcı modellerin ortaya çıkması bekleniyor. Ayrıca bu teknolojinin, etik ve sosyal sorumluluk boyutları da giderek daha fazla tartışılmaktadır.  Kişiselleştirilmiş Modeller: Kullanıcıların kendi veri setlerini kullanarak özel modeller geliştirebileceği bir döneme doğru ilerliyoruz.  Daha Az Veri ile Eğitim: Daha az veriye ihtiyaç duyan, ancak daha etkili sonuçlar üretebilen modeller geliştiriliyor.  Etik ve Yasal Düzenlemeler: Telif hakları, veri gizliliği ve yanlış bilgi yayılımı gibi konulara yönelik çözümler bulunması önem taşıyor.SonuçYapay zeka görsel üretim modelleri, kısa bir süre içinde inanılmaz bir gelişim kaydetmiştir. Tarihsel bir perspektiften bakıldığında, bu modellerin gelişimi yalnızca teknolojik ilerlemeyi değil, aynı zamanda insan yaratıcılığını da yeniden tanımlıyor. Bu modellerin gelecekte nasıl bir şekil alacağını görmek heyecan verici olacak."
  },
  
  {
    "title": "Customize the Favicon",
    "url": "/yapay-zeka-blog/posts/customize-the-favicon/",
    "categories": "Blogging, Tutorial",
    "tags": "favicon",
    "date": "2019-08-10 19:34:00 +0300",
    





    
    "snippet": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons...",
    "content": "The favicons of Chirpy are placed in the directory assets/img/favicons/. You may want to replace them with your own. The following sections will guide you to create and replace the default favicons.Generate the faviconPrepare a square image (PNG, JPG, or SVG) with a size of 512x512 or more, and then go to the online tool Real Favicon Generator and click the button Select your Favicon image to upload your image file.In the next step, the webpage will show all usage scenarios. You can keep the default options, scroll to the bottom of the page, and click the button Generate your Favicons and HTML code to generate the favicon.Download &amp; ReplaceDownload the generated package, unzip and delete the following two from the extracted files:  browserconfig.xml  site.webmanifestAnd then copy the remaining image files (.PNG and .ICO) to cover the original files in the directory assets/img/favicons/ of your Jekyll site. If your Jekyll site doesn’t have this directory yet, just create one.The following table will help you understand the changes to the favicon files:            File(s)      From Online Tool      From Chirpy                  *.PNG      ✓      ✗              *.ICO      ✓      ✗        ✓ means keep, ✗ means delete.The next time you build the site, the favicon will be replaced with a customized edition."
  },
  
  {
    "title": "Getting Started",
    "url": "/yapay-zeka-blog/posts/getting-started/",
    "categories": "Blogging, Tutorial",
    "tags": "getting started",
    "date": "2019-08-09 15:55:00 +0300",
    





    
    "snippet": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnec...",
    "content": "Creating a Site RepositoryWhen creating your site repository, you have two options depending on your needs:Option 1. Using the Starter (Recommended)This approach simplifies upgrades, isolates unnecessary files, and is perfect for users who want to focus on writing with minimal configuration.  Sign in to GitHub and navigate to the starter.  Click the Use this template button and then select Create a new repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Option 2. Forking the ThemeThis approach is convenient for modifying features or UI design, but presents challenges during upgrades. So don’t try this unless you are familiar with Jekyll and plan to heavily modify this theme.  Sign in to GitHub.  Fork the theme repository.  Name the new repository &lt;username&gt;.github.io, replacing username with your lowercase GitHub username.Setting up the EnvironmentOnce your repository is created, it’s time to set up your development environment. There are two primary methods:Using Dev Containers (Recommended for Windows)Dev Containers offer an isolated environment using Docker, which prevents conflicts with your system and ensures all dependencies are managed within the container.Steps:  Install Docker:          On Windows/macOS, install Docker Desktop.      On Linux, install Docker Engine.        Install VS Code and the Dev Containers extension.  Clone your repository:          For Docker Desktop: Start VS Code and clone your repo in a container volume.      For Docker Engine: Clone your repo locally, then open it in a container via VS Code.        Wait for the Dev Containers setup to complete.Setting up Natively (Recommended for Unix-like OS)For Unix-like systems, you can set up the environment natively for optimal performance, though you can also use Dev Containers as an alternative.Steps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone your repository to your local machine.  If you forked the theme, install Node.js and run bash tools/init.sh in the root directory to initialize the repository.  Run command bundle in the root of your repository to install the dependencies.UsageStart the Jekyll ServerTo run the site locally, use the following command:$ bundle exec jekyll s  If you are using Dev Containers, you must run that command in the VS Code Terminal.After a few seconds, the local server will be available at http://127.0.0.1:4000.ConfigurationUpdate the variables in _config.yml as needed. Some typical options include:  url  avatar  timezone  langSocial Contact OptionsSocial contact options are displayed at the bottom of the sidebar. You can enable or disable specific contacts in the _data/contact.yml file.Customizing the StylesheetTo customize the stylesheet, copy the theme’s assets/css/jekyll-theme-chirpy.scss file to the same path in your Jekyll site, and add your custom styles at the end of the file.Customizing Static AssetsStatic assets configuration was introduced in version 5.1.0. The CDN of the static assets is defined in _data/origin/cors.yml. You can replace some of them based on the network conditions in the region where your website is published.If you prefer to self-host the static assets, refer to the chirpy-static-assets repository.DeploymentBefore deploying, check the _config.yml file and ensure the url is configured correctly. If you prefer a project site and don’t use a custom domain, or if you want to visit your website with a base URL on a web server other than GitHub Pages, remember to set the baseurl to your project name, starting with a slash, e.g., /project-name.Now you can choose ONE of the following methods to deploy your Jekyll site.Deploy Using Github ActionsPrepare the following:  If you’re on the GitHub Free plan, keep your site repository public.      If you have committed Gemfile.lock to the repository, and your local machine is not running Linux, update the platform list of the lock file:    $ bundle lock --add-platform x86_64-linux      Next, configure the Pages service:      Go to your repository on GitHub. Select the Settings tab, then click Pages in the left navigation bar. In the Source section (under Build and deployment), select GitHub Actions from the dropdown menu.        Push any commits to GitHub to trigger the Actions workflow. In the Actions tab of your repository, you should see the workflow Build and Deploy running. Once the build is complete and successful, the site will be deployed automatically.  You can now visit the URL provided by GitHub to access your site.Manual Build and DeploymentFor self-hosted servers, you will need to build the site on your local machine and then upload the site files to the server.Navigate to the root of the source project, and build your site with the following command:$ JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in the _site folder of the project’s root directory. Upload these files to your target server."
  },
  
  {
    "title": "Writing a New Post",
    "url": "/yapay-zeka-blog/posts/write-a-new-post/",
    "categories": "Blogging, Tutorial",
    "tags": "writing",
    "date": "2019-08-08 09:10:00 +0300",
    





    
    "snippet": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and P...",
    "content": "This tutorial will guide you how to write a post in the Chirpy template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]     # TAG names should always be lowercase---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Adding author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one).&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.  The benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global setting for comments is defined by the comments.provider option in the _config.yml file. Once a comment system is selected for this variable, comments will be enabled for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MediaWe refer to images, audio and video as media resources in Chirpy.URL PrefixFrom time to time we have to define duplicate URL prefixes for multiple resources in a post, which is a boring task that you can avoid by setting two parameters.      If you are using a CDN to host media files, you can specify the cdn in _config.yml. The URLs of media resources for site avatar and posts are then prefixed with the CDN domain name.    cdn: https://cdn.com            To specify the resource path prefix for the current post/page range, set media_subpath in the front matter of the post:    ---media_subpath: /path/to/media/---      The option site.cdn and page.media_subpath can be used individually or in combination to flexibly compose the final resource URL: [site.cdn/][page.media_subpath/]file.extImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }VideoSocial Media PlatformYou can embed videos from social media platforms with the following syntax:{% include embed/{Platform}.html id='{ID}' %}Where Platform is the lowercase of the platform name, and ID is the video ID.The following table shows how to get the two parameters we need in a given video URL, and you can also know the currently supported video platforms.            Video URL      Platform      ID                  https://www.youtube.com/watch?v=H-B46URT4mg      youtube      H-B46URT4mg              https://www.twitch.tv/videos/1634779211      twitch      1634779211              https://www.bilibili.com/video/BV1Q44y1B7Wf      bilibili      BV1Q44y1B7Wf      Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via chirpy-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-chirpy) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Text and Typography",
    "url": "/yapay-zeka-blog/posts/text-and-typography/",
    "categories": "Blogging, Demo",
    "tags": "typography",
    "date": "2019-08-08 06:33:00 +0300",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.VideoReverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  }
  
]

